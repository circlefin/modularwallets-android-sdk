/*
 * Copyright 2025 Circle Internet Group, Inc. All rights reserved.
 *  
 * SPDX-License-Identifier: Apache-2.0.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at.
 *
 * Http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.circle.modularwallets.core.models

import com.circle.modularwallets.core.utils.encoding.bytesToHex
import com.circle.modularwallets.core.utils.signature.base64DecodeToString
import com.circle.modularwallets.core.utils.signature.base64UrlToBytes

/**
 * Data class representing the result of a signing operation.
 *
 * @param signature The signature generated by the signing operation.
 * @param webAuthn The WebAuthn data associated with the signing operation.
 * @param raw The raw authentication credential used in the signing operation.
 */
data class SignResult(
    val signature: String,
    val webAuthn: WebAuthnData,
    val raw: AuthenticationCredential,
)

/**
 * Data class representing WebAuthn data.
 *
 * @param authenticatorData The authenticator data in hexadecimal format.
 * @param challengeIndex The index of the challenge in the client data JSON.
 * @param clientDataJSON The client data JSON.
 * @param typeIndex The index of the type in the client data JSON.
 * @param userVerificationRequired Indicates whether user verification is required.
 */
data class WebAuthnData(
    val authenticatorData: String,
    val challengeIndex: Int,
    val clientDataJSON: String,
    val typeIndex: Int,
    val userVerificationRequired: Boolean,
)

internal fun AuthenticationCredential.toWebAuthnData(userVerification: String): WebAuthnData {
    val decoded = base64DecodeToString(response.clientDataJSON)

    return WebAuthnData(
        bytesToHex(base64UrlToBytes(response.authenticatorData)),
        decoded.indexOf("\"challenge\""),
        decoded,
        decoded.indexOf("\"type\""),
        userVerification == "required"
    )
}
